version: '1.0.0'

services:
  fastapi_service:
    build:
      context: ./  # Path to Dockerfile for app1
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: dev
        RUN_TYPE: app
    ports:
      - "8080:8080"          # Map ports as needed
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy

  consumer:
    restart: always
    build:
      context: ./
      dockerfile: consumer_Dockerfile  # Path to Dockerfile for app2
      args:
        ENVIRONMENT: dev
        RUN_TYPE: app
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy

  mysql:
    image: mysql:8
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: mydb
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - /tmp/data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
  kafka:
    container_name: kafka
    image: debezium/kafka:2.2.0.Final
    ports:
      - 19092:19092
    restart: always
    environment:
      - CLUSTER_ID=5Yr1SIgYQz-b-dgRabWx4g
      - NODE_ID=1
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_LISTENERS=CONTROLLER://0.0.0.0:9093,INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:19092
      - KAFKA_ADVERTISED_LISTENERS=INSIDE://kafka:9092,OUTSIDE://localhost:19092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
    healthcheck:
      test: [ "CMD", "/kafka/bin/kafka-topics.sh", "--bootstrap-server=localhost:9092", "--list" ]
      interval: 2s
      timeout: 2s
      retries: 10
